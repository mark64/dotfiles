[user]
	name = Mark Hill
	email = markleehill@gmail.com
[alias]
	lg = lg1
	lg1 = log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) %C(dim white)- %an%C(reset)%C(bold yellow)%d%C(reset)' --all
	lg2 = log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold cyan)%aD%C(reset) %C(bold green)(%ar)%C(reset)%C(bold yellow)%d%C(reset)%n''          %C(white)%s%C(reset) %C(dim white)- %an%C(reset)' --all
	files = !git diff --name-only $(git merge-base HEAD \"$REVIEW_BASE\")
	stat = !git diff --stat $(git merge-base HEAD \"$REVIEW_BASE\")
    s = status
    c = checkout
    co = commit
    d = diff
    r = reset
    b = branch
    cp = cherry-pick
[branch]
	sort = -authordate
[color]
	ui = auto
[core]
	editor = nvim
[diff "gpg"]
	textconv = gpg --no-tty --decrypt
[init]
    defaultBranch = main
[pull]
	rebase = false
[rerere]
    enabled = true

# On machines where I have 1password access and for repos that I need signed, I add the following to .git/config
# [user]
#     # Key in 1password.
#     signingkey = ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIJm1mnwpA3vRWsxVQP/ltMxQVpikvVkrEdZFFc763LH6
# [gpg]
#     format = ssh
# [gpg "ssh"]
#     program = "/opt/1Password/op-ssh-sign"
# [commit]
#     gpgsign = true
[filter "lfs"]
	clean = git-lfs clean -- %f
	smudge = git-lfs smudge -- %f
	process = git-lfs filter-process
	required = true
[merge "bazel-lockfile-merge"]
	name = Merge driver for the Bazel lockfile (MODULE.bazel.lock)
	driver = "jq -s '# Merges an arbitrary number of MODULE.bazel.lock files.\n#\n# Input: an array of MODULE.bazel.lock JSON objects (as produced by `jq -s`).\n# Output: a single MODULE.bazel.lock JSON object.\n#\n# This script assumes that all files are valid JSON and have a numeric\n# \"lockFileVersion\" field. It will not fail on any such files, but only\n# preserves information for files with a version of 10 or higher.\n#\n# The first file is considered to be the base when deciding which values to\n# keep in case of conflicts.\n\n# Like unique, but preserves the order of the first occurrence of each element.\ndef stable_unique:\n  reduce .[] as $item ([]; if index($item) == null then . + [$item] else . end);\n\n# Given an array of objects, shallowly merges the result of applying f to each\n# object into a single object, with a few special properties:\n# 1. Values are uniquified before merging and then merged with last-wins\n#    semantics. Assuming that the first value is the base, this ensures that\n#    later occurrences of the base value do not override other values. For\n#    example, when this is called with B A1 A2 and A1 contains changes to a\n#    field but A2 does not (compared to B), the changes in A1 will be preserved.\n# 2. Object keys on the top level are sorted lexicographically after merging,\n#    but are additionally split on \":\". This ensures that module extension IDs,\n#    which start with labels, sort as strings in the same way as they due as\n#    structured objects in Bazel (that is, //python/extensions:python.bzl\n#    sorts before //python/extensions/private:internal_deps.bzl).\ndef shallow_merge(f):\n  map(f) | stable_unique | add | to_entries | sort_by(.key | split(\":\")) | from_entries;\n\n(\n    # Ignore all MODULE.bazel.lock files that do not have the maximum\n    # lockFileVersion.\n    (map(.lockFileVersion) | max) as $maxVersion\n    | map(select(.lockFileVersion == $maxVersion))\n    | {\n        lockFileVersion: $maxVersion,\n        registryFileHashes: shallow_merge(.registryFileHashes),\n        selectedYankedVersions: shallow_merge(.selectedYankedVersions),\n        # Group extension results by extension ID across all lockfiles with\n        # shallowly merged factors map, then shallowly merge the results.\n        moduleExtensions:  (map(.moduleExtensions | to_entries)\n                           | flatten\n                           | group_by(.key)\n                           | shallow_merge({(.[0].key): shallow_merge(.value)}))\n    }\n)? //\n    # We get here if the lockfiles with the highest lockFileVersion could not be\n    # processed, for example because all lockfiles have lockFileVersion < 10.\n    # In this case Bazel 7.2.0+ would ignore all lockfiles, so we might as well\n    # return the first lockfile for the proper \"mismatched version\" error\n    # message.\n    .[0]' -- %O %A %B > %A.jq_tmp && mv %A.jq_tmp %A"
